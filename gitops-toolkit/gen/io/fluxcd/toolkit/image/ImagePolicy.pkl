/// ImagePolicy is the Schema for the imagepolicies API
///
/// This module was generated from the CustomResourceDefinition at
/// <https://raw.githubusercontent.com/fluxcd/image-reflector-controller/refs/tags/v0.33.0/config/crd/bases/image.toolkit.fluxcd.io_imagepolicies.yaml>.
module io.fluxcd.toolkit.image.v1beta2.ImagePolicy

extends "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.1.1#/K8sResource.pkl"

import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.1.1#/apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "image.toolkit.fluxcd.io/v1beta2"

fixed kind: "ImagePolicy"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.
metadata: ObjectMeta?

/// ImagePolicySpec defines the parameters for calculating the ImagePolicy.
spec: Spec?

/// ImagePolicyStatus defines the observed state of ImagePolicy
///
/// Default if undefined: `{ ["observedGeneration"] = -1 }`
status: Status?

/// ImagePolicySpec defines the parameters for calculating the ImagePolicy.
class Spec {
  /// FilterTags enables filtering for only a subset of tags based on a set of rules. If no rules are
  /// provided, all the tags from the repository will be ordered and compared.
  filterTags: FilterTags?

  /// ImageRepositoryRef points at the object specifying the image being scanned
  imageRepositoryRef: ImageRepositoryRef

  /// Policy gives the particulars of the policy to be followed in selecting the most recent image
  policy: Policy
}

/// FilterTags enables filtering for only a subset of tags based on a set of rules. If no rules are
/// provided, all the tags from the repository will be ordered and compared.
class FilterTags {
  /// Extract allows a capture group to be extracted from the specified regular expression pattern,
  /// useful before tag evaluation.
  extract: String?

  /// Pattern specifies a regular expression pattern used to filter for image tags.
  pattern: String?
}

/// ImageRepositoryRef points at the object specifying the image being scanned
class ImageRepositoryRef {
  /// Name of the referent.
  name: String

  /// Namespace of the referent, when not specified it acts as LocalObjectReference.
  namespace: String?
}

/// Policy gives the particulars of the policy to be followed in selecting the most recent image
class Policy {
  /// Alphabetical set of rules to use for alphabetical ordering of the tags.
  alphabetical: Alphabetical?

  /// Numerical set of rules to use for numerical ordering of the tags.
  numerical: Numerical?

  /// SemVer gives a semantic version range to check against the tags available.
  semver: Semver?
}

/// Alphabetical set of rules to use for alphabetical ordering of the tags.
class Alphabetical {
  /// Order specifies the sorting order of the tags. Given the letters of the alphabet as tags, ascending
  /// order would select Z, and descending order would select A.
  ///
  /// Default if undefined: `"asc"`
  order: ("asc"|"desc")?
}

/// Numerical set of rules to use for numerical ordering of the tags.
class Numerical {
  /// Order specifies the sorting order of the tags. Given the integer values from 0 to 9 as tags,
  /// ascending order would select 9, and descending order would select 0.
  ///
  /// Default if undefined: `"asc"`
  order: ("asc"|"desc")?
}

/// SemVer gives a semantic version range to check against the tags available.
class Semver {
  /// Range gives a semver range for the image tag; the highest version within the range that's a tag
  /// yields the latest image.
  range: String
}

/// ImagePolicyStatus defines the observed state of ImagePolicy
///
/// Default if undefined: `{ ["observedGeneration"] = -1 }`
class Status {
  conditions: Listing<Condition>?

  /// LatestImage gives the first in the list of images scanned by the image repository, when filtered
  /// and ordered according to the policy.
  latestImage: String?

  observedGeneration: Int?

  /// ObservedPreviousImage is the observed previous LatestImage. It is used to keep track of the
  /// previous and current images.
  observedPreviousImage: String?
}

/// Condition contains details for one aspect of the current state of this API Resource.
class Condition {
  /// lastTransitionTime is the last time the condition transitioned from one status to another. This
  /// should be when the underlying condition changed. If that is not known, then using the time when the
  /// API field changed is acceptable.
  lastTransitionTime: String

  /// message is a human readable message indicating details about the transition. This may be an empty
  /// string.
  message: String(length <= 32768)

  /// observedGeneration represents the .metadata.generation that the condition was set based upon. For
  /// instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration
  /// is 9, the condition is out of date with respect to the current state of the instance.
  observedGeneration: Int(isPositive)?

  /// reason contains a programmatic identifier indicating the reason for the condition's last
  /// transition. Producers of specific condition types may define expected values and meanings for this
  /// field, and whether the values are considered a guaranteed API. The value should be a CamelCase
  /// string. This field may not be empty.
  reason: String(length.isBetween(1, 1024), matches(Regex("^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")))

  /// status of the condition, one of True, False, Unknown.
  status: "True"|"False"|"Unknown"

  /// type of condition in CamelCase or in foo.example.com/CamelCase.
  type: String(length <= 316, matches(Regex(#"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"#)))
}
