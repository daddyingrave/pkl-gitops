/// ImageUpdateAutomation is the Schema for the imageupdateautomations API
///
/// This module was generated from the CustomResourceDefinition at
/// <https://raw.githubusercontent.com/fluxcd/image-automation-controller/refs/tags/v0.39.0/config/crd/bases/image.toolkit.fluxcd.io_imageupdateautomations.yaml>.
module io.fluxcd.toolkit.image.v1beta2.ImageUpdateAutomation

extends "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.1.1#/K8sResource.pkl"

import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.1.1#/apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "image.toolkit.fluxcd.io/v1beta2"

fixed kind: "ImageUpdateAutomation"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.
metadata: ObjectMeta?

/// ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation
spec: Spec?

/// ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation
///
/// Default if undefined: `{ ["observedGeneration"] = -1 }`
status: Status?

/// ImageUpdateAutomationSpec defines the desired state of ImageUpdateAutomation
class Spec {
  /// GitSpec contains all the git-specific definitions. This is technically optional, but in practice
  /// mandatory until there are other kinds of source allowed.
  git: Git?

  /// Interval gives an lower bound for how often the automation run should be attempted.
  interval: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))

  /// PolicySelector allows to filter applied policies based on labels. By default includes all policies
  /// in namespace.
  policySelector: PolicySelector?

  /// SourceRef refers to the resource giving access details to a git repository.
  sourceRef: SourceRef

  /// Suspend tells the controller to not run this automation, until it is unset (or set to false).
  /// Defaults to false.
  suspend: Boolean?

  /// Update gives the specification for how to update the files in the repository. This can be left
  /// empty, to use the default value.
  ///
  /// Default if undefined: `{ ["strategy"] = "Setters" }`
  update: Update?
}

/// GitSpec contains all the git-specific definitions. This is technically optional, but in practice
/// mandatory until there are other kinds of source allowed.
class Git {
  /// Checkout gives the parameters for cloning the git repository, ready to make changes. If not
  /// present, the `spec.ref` field from the referenced `GitRepository` or its default will be used.
  checkout: Checkout?

  /// Commit specifies how to commit to the git repository.
  commit: Commit

  /// Push specifies how and where to push commits made by the automation. If missing, commits are pushed
  /// (back) to `.spec.checkout.branch` or its default.
  push: Push?
}

/// Checkout gives the parameters for cloning the git repository, ready to make changes. If not present,
/// the `spec.ref` field from the referenced `GitRepository` or its default will be used.
class Checkout {
  /// Reference gives a branch, tag or commit to clone from the Git repository.
  ref: Ref
}

/// Reference gives a branch, tag or commit to clone from the Git repository.
class Ref {
  /// Branch to check out, defaults to 'master' if no other field is defined.
  branch: String?

  /// Commit SHA to check out, takes precedence over all reference fields.
  ///
  /// This can be combined with Branch to shallow clone the branch, in which the commit is expected to
  /// exist.
  commit: String?

  /// Name of the reference to check out; takes precedence over Branch, Tag and SemVer.
  ///
  /// It must be a valid Git reference: https://git-scm.com/docs/git-check-ref-format#_description
  /// Examples: "refs/heads/main", "refs/tags/v0.1.0", "refs/pull/420/head", "refs/merge-requests/1/head"
  name: String?

  /// SemVer tag expression to check out, takes precedence over Tag.
  semver: String?

  /// Tag to check out, takes precedence over Branch.
  tag: String?
}

/// Commit specifies how to commit to the git repository.
class Commit {
  /// Author gives the email and optionally the name to use as the author of commits.
  author: Author

  /// MessageTemplate provides a template for the commit message, into which will be interpolated the
  /// details of the change made.
  messageTemplate: String?

  /// SigningKey provides the option to sign commits with a GPG key
  signingKey: SigningKey?
}

/// Author gives the email and optionally the name to use as the author of commits.
class Author {
  /// Email gives the email to provide when making a commit.
  email: String

  /// Name gives the name to provide when making a commit.
  name: String?
}

/// SigningKey provides the option to sign commits with a GPG key
class SigningKey {
  /// SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII
  /// Armored file containing the GPG signing keypair as the value. It must be in the same namespace as
  /// the ImageUpdateAutomation.
  secretRef: SecretRef
}

/// SecretRef holds the name to a secret that contains a 'git.asc' key corresponding to the ASCII Armored
/// file containing the GPG signing keypair as the value. It must be in the same namespace as the
/// ImageUpdateAutomation.
class SecretRef {
  /// Name of the referent.
  name: String
}

/// Push specifies how and where to push commits made by the automation. If missing, commits are pushed
/// (back) to `.spec.checkout.branch` or its default.
class Push {
  /// Branch specifies that commits should be pushed to the branch named. The branch is created using
  /// `.spec.checkout.branch` as the starting point, if it doesn't already exist.
  branch: String?

  /// Options specifies the push options that are sent to the Git server when performing a push
  /// operation. For details, see:
  /// https://git-scm.com/docs/git-push#Documentation/git-push.txt---push-optionltoptiongt
  options: Mapping<String, String>?

  /// Refspec specifies the Git Refspec to use for a push operation. If both Branch and Refspec are
  /// provided, then the commit is pushed to the branch and also using the specified refspec. For more
  /// details about Git Refspecs, see: https://git-scm.com/book/en/v2/Git-Internals-The-Refspec
  refspec: String?
}

/// PolicySelector allows to filter applied policies based on labels. By default includes all policies in
/// namespace.
class PolicySelector {
  /// matchExpressions is a list of label selector requirements. The requirements are ANDed.
  matchExpressions: Listing<MatchExpression>?

  /// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is
  /// equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and
  /// the values array contains only "value". The requirements are ANDed.
  matchLabels: Mapping<String, String>?
}

/// A label selector requirement is a selector that contains values, a key, and an operator that relates
/// the key and values.
class MatchExpression {
  /// key is the label key that the selector applies to.
  key: String

  /// operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists
  /// and DoesNotExist.
  operator: String

  /// values is an array of string values. If the operator is In or NotIn, the values array must be
  /// non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is
  /// replaced during a strategic merge patch.
  values: Listing<String>?
}

/// SourceRef refers to the resource giving access details to a git repository.
class SourceRef {
  /// API version of the referent.
  apiVersion: String?

  /// Kind of the referent.
  ///
  /// Default if undefined: `"GitRepository"`
  kind: "GitRepository"

  /// Name of the referent.
  name: String

  /// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that
  /// contains the reference.
  namespace: String?
}

/// Update gives the specification for how to update the files in the repository. This can be left empty,
/// to use the default value.
///
/// Default if undefined: `{ ["strategy"] = "Setters" }`
class Update {
  /// Path to the directory containing the manifests to be updated. Defaults to 'None', which translates
  /// to the root path of the GitRepositoryRef.
  path: String?

  /// Strategy names the strategy to be used.
  ///
  /// Default if undefined: `"Setters"`
  strategy: "Setters"
}

/// ImageUpdateAutomationStatus defines the observed state of ImageUpdateAutomation
///
/// Default if undefined: `{ ["observedGeneration"] = -1 }`
class Status {
  conditions: Listing<Condition>?

  /// LastAutomationRunTime records the last time the controller ran this automation through to
  /// completion (even if no updates were made).
  lastAutomationRunTime: String?

  /// LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change of
  /// the annotation value can be detected.
  lastHandledReconcileAt: String?

  /// LastPushCommit records the SHA1 of the last commit made by the controller, for this automation
  /// object
  lastPushCommit: String?

  /// LastPushTime records the time of the last pushed change.
  lastPushTime: String?

  observedGeneration: Int?

  /// ObservedPolicies is the list of observed ImagePolicies that were considered by the
  /// ImageUpdateAutomation update process.
  observedPolicies: Mapping<String, ObservedPolicies>?

  /// ObservedPolicies []ObservedPolicy `json:"observedPolicies,omitempty"` ObservedSourceRevision is the
  /// last observed source revision. This can be used to determine if the source has been updated since
  /// last observation.
  observedSourceRevision: String?
}

/// Condition contains details for one aspect of the current state of this API Resource.
class Condition {
  /// lastTransitionTime is the last time the condition transitioned from one status to another. This
  /// should be when the underlying condition changed. If that is not known, then using the time when the
  /// API field changed is acceptable.
  lastTransitionTime: String

  /// message is a human readable message indicating details about the transition. This may be an empty
  /// string.
  message: String(length <= 32768)

  /// observedGeneration represents the .metadata.generation that the condition was set based upon. For
  /// instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration
  /// is 9, the condition is out of date with respect to the current state of the instance.
  observedGeneration: Int(isPositive)?

  /// reason contains a programmatic identifier indicating the reason for the condition's last
  /// transition. Producers of specific condition types may define expected values and meanings for this
  /// field, and whether the values are considered a guaranteed API. The value should be a CamelCase
  /// string. This field may not be empty.
  reason: String(length.isBetween(1, 1024), matches(Regex("^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")))

  /// status of the condition, one of True, False, Unknown.
  status: "True"|"False"|"Unknown"

  /// type of condition in CamelCase or in foo.example.com/CamelCase.
  type: String(length <= 316, matches(Regex(#"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"#)))
}

/// ImageRef represents an image reference.
class ObservedPolicies {
  /// Name is the bare image's name.
  name: String

  /// Tag is the image's tag.
  tag: String
}
