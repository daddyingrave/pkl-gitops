/// HelmRelease is the Schema for the helmreleases API
///
/// This module was generated from the CustomResourceDefinition at
/// <https://raw.githubusercontent.com/fluxcd/helm-controller/refs/tags/v1.1.0/config/crd/bases/helm.toolkit.fluxcd.io_helmreleases.yaml>.
module io.fluxcd.toolkit.helm.v2.HelmRelease

extends "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.1.1#/K8sResource.pkl"

import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.1.1#/apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "helm.toolkit.fluxcd.io/v2"

fixed kind: "HelmRelease"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.
metadata: ObjectMeta?

/// HelmReleaseSpec defines the desired state of a Helm release.
spec: Spec?

/// HelmReleaseStatus defines the observed state of a HelmRelease.
///
/// Default if undefined: `{ ["observedGeneration"] = -1 }`
status: Status?

/// HelmReleaseSpec defines the desired state of a Helm release.
class Spec {
  /// Chart defines the template of the v1.HelmChart that should be created for this HelmRelease.
  chart: Chart?

  /// ChartRef holds a reference to a source controller resource containing the Helm chart artifact.
  chartRef: ChartRef?

  /// DependsOn may contain a meta.NamespacedObjectReference slice with references to HelmRelease
  /// resources that must be ready before this HelmRelease can be reconciled.
  dependsOn: Listing<DependsOn>?

  /// DriftDetection holds the configuration for detecting and handling differences between the manifest
  /// in the Helm storage and the resources currently existing in the cluster.
  driftDetection: DriftDetection?

  /// Install holds the configuration for Helm install actions for this HelmRelease.
  install: Install?

  /// Interval at which to reconcile the Helm release.
  interval: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))

  /// KubeConfig for reconciling the HelmRelease on a remote cluster. When used in combination with
  /// HelmReleaseSpec.ServiceAccountName, forces the controller to act on behalf of that Service Account
  /// at the target cluster. If the --default-service-account flag is set, its value will be used as a
  /// controller level fallback for when HelmReleaseSpec.ServiceAccountName is empty.
  kubeConfig: KubeConfig?

  /// MaxHistory is the number of revisions saved by Helm for this HelmRelease. Use '0' for an unlimited
  /// number of revisions; defaults to '5'.
  maxHistory: Int?

  /// PersistentClient tells the controller to use a persistent Kubernetes client for this release. When
  /// enabled, the client will be reused for the duration of the reconciliation, instead of being created
  /// and destroyed for each (step of a) Helm action.
  ///
  /// This can improve performance, but may cause issues with some Helm charts that for example do create
  /// Custom Resource Definitions during installation outside Helm's CRD lifecycle hooks, which are then
  /// not observed to be available by e.g. post-install hooks.
  ///
  /// If not set, it defaults to true.
  persistentClient: Boolean?

  /// PostRenderers holds an array of Helm PostRenderers, which will be applied in order of their
  /// definition.
  postRenderers: Listing<PostRenderer>?

  /// ReleaseName used for the Helm release. Defaults to a composition of '[TargetNamespace-]Name'.
  releaseName: String(length.isBetween(1, 53))?

  /// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
  rollback: Rollback?

  /// The name of the Kubernetes service account to impersonate when reconciling this HelmRelease.
  serviceAccountName: String(length.isBetween(1, 253))?

  /// StorageNamespace used for the Helm storage. Defaults to the namespace of the HelmRelease.
  storageNamespace: String(length.isBetween(1, 63))?

  /// Suspend tells the controller to suspend reconciliation for this HelmRelease, it does not apply to
  /// already started reconciliations. Defaults to false.
  suspend: Boolean?

  /// TargetNamespace to target when performing operations for the HelmRelease. Defaults to the namespace
  /// of the HelmRelease.
  targetNamespace: String(length.isBetween(1, 63))?

  /// Test holds the configuration for Helm test actions for this HelmRelease.
  test: Test?

  /// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during
  /// the performance of a Helm action. Defaults to '5m0s'.
  timeout: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))?

  /// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
  uninstall: Uninstall?

  /// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
  upgrade: Upgrade?

  /// Values holds the values for this Helm release.
  values: Any?

  /// ValuesFrom holds references to resources containing Helm values for this HelmRelease, and
  /// information about how they should be merged.
  valuesFrom: Listing<ValuesFrom>?
}

/// Chart defines the template of the v1.HelmChart that should be created for this HelmRelease.
class Chart {
  /// ObjectMeta holds the template for metadata like labels and annotations.
  metadata: Metadata?

  /// Spec holds the template for the v1.HelmChartSpec for this HelmRelease.
  spec: ChartSpec
}

/// ObjectMeta holds the template for metadata like labels and annotations.
class Metadata {
  /// Annotations is an unstructured key value map stored with a resource that may be set by external
  /// tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when
  /// modifying objects. More info:
  /// https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
  annotations: Mapping<String, String>?

  /// Map of string keys and values that can be used to organize and categorize (scope and select)
  /// objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
  labels: Mapping<String, String>?
}

/// Spec holds the template for the v1.HelmChartSpec for this HelmRelease.
class ChartSpec {
  /// The name or path the Helm chart is available at in the SourceRef.
  chart: String(length.isBetween(1, 2048))

  /// IgnoreMissingValuesFiles controls whether to silently ignore missing values files rather than
  /// failing.
  ignoreMissingValuesFiles: Boolean?

  /// Interval at which to check the v1.Source for updates. Defaults to 'HelmReleaseSpec.Interval'.
  interval: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))?

  /// Determines what enables the creation of a new artifact. Valid values are ('ChartVersion',
  /// 'Revision'). See the documentation of the values for an explanation on their behavior. Defaults to
  /// ChartVersion when omitted.
  ///
  /// Default if undefined: `"ChartVersion"`
  reconcileStrategy: ("ChartVersion"|"Revision")?

  /// The name and namespace of the v1.Source the chart is available at.
  sourceRef: SourceRef

  /// Alternative list of values files to use as the chart values (values.yaml is not included by
  /// default), expected to be a relative path in the SourceRef. Values files are merged in the order of
  /// this list with the last file overriding the first. Ignored when omitted.
  valuesFiles: Listing<String>?

  /// Verify contains the secret name containing the trusted public keys used to verify the signature and
  /// specifies which provider to use to check whether OCI image is authentic. This field is only
  /// supported for OCI sources. Chart dependencies, which are not bundled in the umbrella chart
  /// artifact, are not verified.
  verify: Verify?

  /// Version semver expression, ignored for charts from v1.GitRepository and v1beta2.Bucket sources.
  /// Defaults to latest when omitted.
  ///
  /// Default if undefined: `"*"`
  version: String?
}

/// The name and namespace of the v1.Source the chart is available at.
class SourceRef {
  /// APIVersion of the referent.
  apiVersion: String?

  /// Kind of the referent.
  kind: "HelmRepository"|"GitRepository"|"Bucket"

  /// Name of the referent.
  name: String(length.isBetween(1, 253))

  /// Namespace of the referent.
  namespace: String(length.isBetween(1, 63))?
}

/// Verify contains the secret name containing the trusted public keys used to verify the signature and
/// specifies which provider to use to check whether OCI image is authentic. This field is only supported
/// for OCI sources. Chart dependencies, which are not bundled in the umbrella chart artifact, are not
/// verified.
class Verify {
  /// Provider specifies the technology used to sign the OCI Helm chart.
  ///
  /// Default if undefined: `"cosign"`
  provider: "cosign"|"notation"

  /// SecretRef specifies the Kubernetes Secret containing the trusted public keys.
  secretRef: SecretRef?
}

/// SecretRef specifies the Kubernetes Secret containing the trusted public keys.
class SecretRef {
  /// Name of the referent.
  name: String
}

/// ChartRef holds a reference to a source controller resource containing the Helm chart artifact.
class ChartRef {
  /// APIVersion of the referent.
  apiVersion: String?

  /// Kind of the referent.
  kind: "OCIRepository"|"HelmChart"

  /// Name of the referent.
  name: String(length.isBetween(1, 253))

  /// Namespace of the referent, defaults to the namespace of the Kubernetes resource object that
  /// contains the reference.
  namespace: String(length.isBetween(1, 63))?
}

/// NamespacedObjectReference contains enough information to locate the referenced Kubernetes resource
/// object in any namespace.
class DependsOn {
  /// Name of the referent.
  name: String

  /// Namespace of the referent, when not specified it acts as LocalObjectReference.
  namespace: String?
}

/// DriftDetection holds the configuration for detecting and handling differences between the manifest in
/// the Helm storage and the resources currently existing in the cluster.
class DriftDetection {
  /// Ignore contains a list of rules for specifying which changes to ignore during diffing.
  ignore: Listing<Ignore>?

  /// Mode defines how differences should be handled between the Helm manifest and the manifest currently
  /// applied to the cluster. If not explicitly set, it defaults to DiffModeDisabled.
  mode: ("enabled"|"warn"|"disabled")?
}

/// IgnoreRule defines a rule to selectively disregard specific changes during the drift detection
/// process.
class Ignore {
  /// Paths is a list of JSON Pointer (RFC 6901) paths to be excluded from consideration in a Kubernetes
  /// object.
  paths: Listing<String>

  /// Target is a selector for specifying Kubernetes objects to which this rule applies. If Target is not
  /// set, the Paths will be ignored for all Kubernetes objects within the manifest of the Helm release.
  target: Target?
}

/// Target is a selector for specifying Kubernetes objects to which this rule applies. If Target is not
/// set, the Paths will be ignored for all Kubernetes objects within the manifest of the Helm release.
class Target {
  /// AnnotationSelector is a string that follows the label selection expression
  /// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the
  /// resource annotations.
  annotationSelector: String?

  /// Group is the API group to select resources from. Together with Version and Kind it is capable of
  /// unambiguously identifying and/or selecting resources.
  /// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
  group: String?

  /// Kind of the API Group to select resources from. Together with Group and Version it is capable of
  /// unambiguously identifying and/or selecting resources.
  /// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
  kind: String?

  /// LabelSelector is a string that follows the label selection expression
  /// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the
  /// resource labels.
  labelSelector: String?

  /// Name to match resources with.
  name: String?

  /// Namespace to select resources from.
  namespace: String?

  /// Version of the API Group to select resources from. Together with Group and Kind it is capable of
  /// unambiguously identifying and/or selecting resources.
  /// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
  version: String?
}

/// Install holds the configuration for Helm install actions for this HelmRelease.
class Install {
  /// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided
  /// here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Create` and if omitted CRDs
  /// are installed but not updated.
  ///
  /// Skip: do neither install nor replace (update) any CRDs.
  ///
  /// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
  ///
  /// CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
  ///
  /// By default, CRDs are applied (installed) during Helm install action. With this option users can opt
  /// in to CRD replace existing CRDs on Helm install actions, which is not (yet) natively supported by
  /// Helm. https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
  crds: ("Skip"|"Create"|"CreateReplace")?

  /// CreateNamespace tells the Helm install action to create the HelmReleaseSpec.TargetNamespace if it
  /// does not exist yet. On uninstall, the namespace will not be garbage collected.
  createNamespace: Boolean?

  /// DisableHooks prevents hooks from running during the Helm install action.
  disableHooks: Boolean?

  /// DisableOpenAPIValidation prevents the Helm install action from validating rendered templates
  /// against the Kubernetes OpenAPI Schema.
  disableOpenAPIValidation: Boolean?

  /// DisableSchemaValidation prevents the Helm install action from validating the values against the
  /// JSON Schema.
  disableSchemaValidation: Boolean?

  /// DisableWait disables the waiting for resources to be ready after a Helm install has been performed.
  disableWait: Boolean?

  /// DisableWaitForJobs disables waiting for jobs to complete after a Helm install has been performed.
  disableWaitForJobs: Boolean?

  /// Remediation holds the remediation configuration for when the Helm install action for the
  /// HelmRelease fails. The default is to not perform any action.
  remediation: Remediation?

  /// Replace tells the Helm install action to re-use the 'ReleaseName', but only if that name is a
  /// deleted release which remains in the history.
  replace: Boolean?

  /// SkipCRDs tells the Helm install action to not install any CRDs. By default, CRDs are installed if
  /// not already present.
  ///
  /// Deprecated use CRD policy (`crds`) attribute with value `Skip` instead.
  skipCRDs: Boolean?

  /// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during
  /// the performance of a Helm install action. Defaults to 'HelmReleaseSpec.Timeout'.
  timeout: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))?
}

/// Remediation holds the remediation configuration for when the Helm install action for the HelmRelease
/// fails. The default is to not perform any action.
class Remediation {
  /// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an
  /// install action but fail. Defaults to 'Test.IgnoreFailures'.
  ignoreTestFailures: Boolean?

  /// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain.
  /// Defaults to 'false'.
  remediateLastFailure: Boolean?

  /// Retries is the number of retries that should be attempted on failures before bailing. Remediation,
  /// using an uninstall, is performed between each attempt. Defaults to '0', a negative integer equals
  /// to unlimited retries.
  retries: Int?
}

/// KubeConfig for reconciling the HelmRelease on a remote cluster. When used in combination with
/// HelmReleaseSpec.ServiceAccountName, forces the controller to act on behalf of that Service Account at
/// the target cluster. If the --default-service-account flag is set, its value will be used as a
/// controller level fallback for when HelmReleaseSpec.ServiceAccountName is empty.
class KubeConfig {
  /// SecretRef holds the name of a secret that contains a key with the kubeconfig file as the value. If
  /// no key is set, the key will default to 'value'. It is recommended that the kubeconfig is
  /// self-contained, and the secret is regularly updated if credentials such as a cloud-access-token
  /// expire. Cloud specific `cmd-path` auth helpers will not function without adding binaries and
  /// credentials to the Pod that is responsible for reconciling Kubernetes resources.
  secretRef: KubeConfigSecretRef
}

/// SecretRef holds the name of a secret that contains a key with the kubeconfig file as the value. If no
/// key is set, the key will default to 'value'. It is recommended that the kubeconfig is self-contained,
/// and the secret is regularly updated if credentials such as a cloud-access-token expire. Cloud
/// specific `cmd-path` auth helpers will not function without adding binaries and credentials to the Pod
/// that is responsible for reconciling Kubernetes resources.
class KubeConfigSecretRef {
  /// Key in the Secret, when not specified an implementation-specific default key is used.
  key: String?

  /// Name of the Secret.
  name: String
}

/// PostRenderer contains a Helm PostRenderer specification.
class PostRenderer {
  /// Kustomization to apply as PostRenderer.
  kustomize: Kustomize?
}

/// Kustomization to apply as PostRenderer.
class Kustomize {
  /// Images is a list of (image name, new name, new tag or digest) for changing image names, tags or
  /// digests. This can also be achieved with a patch, but this operator is simpler to specify.
  images: Listing<Image>?

  /// Strategic merge and JSON patches, defined as inline YAML objects, capable of targeting objects
  /// based on kind, label and annotation selectors.
  patches: Listing<Patch>?
}

/// Image contains an image name, a new name, a new tag or digest, which will replace the original name
/// and tag.
class Image {
  /// Digest is the value used to replace the original image tag. If digest is present NewTag value is
  /// ignored.
  digest: String?

  /// Name is a tag-less image name.
  name: String

  /// NewName is the value used to replace the original name.
  newName: String?

  /// NewTag is the value used to replace the original tag.
  newTag: String?
}

/// Patch contains an inline StrategicMerge or JSON6902 patch, and the target the patch should be applied
/// to.
class Patch {
  /// Patch contains an inline StrategicMerge patch or an inline JSON6902 patch with an array of
  /// operation objects.
  patch: String

  /// Target points to the resources that the patch document should be applied to.
  target: PatchTarget?
}

/// Target points to the resources that the patch document should be applied to.
class PatchTarget {
  /// AnnotationSelector is a string that follows the label selection expression
  /// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the
  /// resource annotations.
  annotationSelector: String?

  /// Group is the API group to select resources from. Together with Version and Kind it is capable of
  /// unambiguously identifying and/or selecting resources.
  /// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
  group: String?

  /// Kind of the API Group to select resources from. Together with Group and Version it is capable of
  /// unambiguously identifying and/or selecting resources.
  /// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
  kind: String?

  /// LabelSelector is a string that follows the label selection expression
  /// https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#api It matches with the
  /// resource labels.
  labelSelector: String?

  /// Name to match resources with.
  name: String?

  /// Namespace to select resources from.
  namespace: String?

  /// Version of the API Group to select resources from. Together with Group and Kind it is capable of
  /// unambiguously identifying and/or selecting resources.
  /// https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/api-group.md
  version: String?
}

/// Rollback holds the configuration for Helm rollback actions for this HelmRelease.
class Rollback {
  /// CleanupOnFail allows deletion of new resources created during the Helm rollback action when it
  /// fails.
  cleanupOnFail: Boolean?

  /// DisableHooks prevents hooks from running during the Helm rollback action.
  disableHooks: Boolean?

  /// DisableWait disables the waiting for resources to be ready after a Helm rollback has been
  /// performed.
  disableWait: Boolean?

  /// DisableWaitForJobs disables waiting for jobs to complete after a Helm rollback has been performed.
  disableWaitForJobs: Boolean?

  /// Force forces resource updates through a replacement strategy.
  force: Boolean?

  /// Recreate performs pod restarts for the resource if applicable.
  recreate: Boolean?

  /// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during
  /// the performance of a Helm rollback action. Defaults to 'HelmReleaseSpec.Timeout'.
  timeout: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))?
}

/// Test holds the configuration for Helm test actions for this HelmRelease.
class Test {
  /// Enable enables Helm test actions for this HelmRelease after an Helm install or upgrade action has
  /// been performed.
  enable: Boolean?

  /// Filters is a list of tests to run or exclude from running.
  filters: Listing<Filter>?

  /// IgnoreFailures tells the controller to skip remediation when the Helm tests are run but fail. Can
  /// be overwritten for tests run after install or upgrade actions in 'Install.IgnoreTestFailures' and
  /// 'Upgrade.IgnoreTestFailures'.
  ignoreFailures: Boolean?

  /// Timeout is the time to wait for any individual Kubernetes operation during the performance of a
  /// Helm test action. Defaults to 'HelmReleaseSpec.Timeout'.
  timeout: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))?
}

/// Filter holds the configuration for individual Helm test filters.
class Filter {
  /// Exclude specifies whether the named test should be excluded.
  exclude: Boolean?

  /// Name is the name of the test.
  name: String(length.isBetween(1, 253))
}

/// Uninstall holds the configuration for Helm uninstall actions for this HelmRelease.
class Uninstall {
  /// DeletionPropagation specifies the deletion propagation policy when a Helm uninstall is performed.
  ///
  /// Default if undefined: `"background"`
  deletionPropagation: ("background"|"foreground"|"orphan")?

  /// DisableHooks prevents hooks from running during the Helm rollback action.
  disableHooks: Boolean?

  /// DisableWait disables waiting for all the resources to be deleted after a Helm uninstall is
  /// performed.
  disableWait: Boolean?

  /// KeepHistory tells Helm to remove all associated resources and mark the release as deleted, but
  /// retain the release history.
  keepHistory: Boolean?

  /// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during
  /// the performance of a Helm uninstall action. Defaults to 'HelmReleaseSpec.Timeout'.
  timeout: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))?
}

/// Upgrade holds the configuration for Helm upgrade actions for this HelmRelease.
class Upgrade {
  /// CleanupOnFail allows deletion of new resources created during the Helm upgrade action when it
  /// fails.
  cleanupOnFail: Boolean?

  /// CRDs upgrade CRDs from the Helm Chart's crds directory according to the CRD upgrade policy provided
  /// here. Valid values are `Skip`, `Create` or `CreateReplace`. Default is `Skip` and if omitted CRDs
  /// are neither installed nor upgraded.
  ///
  /// Skip: do neither install nor replace (update) any CRDs.
  ///
  /// Create: new CRDs are created, existing CRDs are neither updated nor deleted.
  ///
  /// CreateReplace: new CRDs are created, existing CRDs are updated (replaced) but not deleted.
  ///
  /// By default, CRDs are not applied during Helm upgrade action. With this option users can opt-in to
  /// CRD upgrade, which is not (yet) natively supported by Helm.
  /// https://helm.sh/docs/chart_best_practices/custom_resource_definitions.
  crds: ("Skip"|"Create"|"CreateReplace")?

  /// DisableHooks prevents hooks from running during the Helm upgrade action.
  disableHooks: Boolean?

  /// DisableOpenAPIValidation prevents the Helm upgrade action from validating rendered templates
  /// against the Kubernetes OpenAPI Schema.
  disableOpenAPIValidation: Boolean?

  /// DisableSchemaValidation prevents the Helm upgrade action from validating the values against the
  /// JSON Schema.
  disableSchemaValidation: Boolean?

  /// DisableWait disables the waiting for resources to be ready after a Helm upgrade has been performed.
  disableWait: Boolean?

  /// DisableWaitForJobs disables waiting for jobs to complete after a Helm upgrade has been performed.
  disableWaitForJobs: Boolean?

  /// Force forces resource updates through a replacement strategy.
  force: Boolean?

  /// PreserveValues will make Helm reuse the last release's values and merge in overrides from 'Values'.
  /// Setting this flag makes the HelmRelease non-declarative.
  preserveValues: Boolean?

  /// Remediation holds the remediation configuration for when the Helm upgrade action for the
  /// HelmRelease fails. The default is to not perform any action.
  remediation: UpgradeRemediation?

  /// Timeout is the time to wait for any individual Kubernetes operation (like Jobs for hooks) during
  /// the performance of a Helm upgrade action. Defaults to 'HelmReleaseSpec.Timeout'.
  timeout: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))?
}

/// Remediation holds the remediation configuration for when the Helm upgrade action for the HelmRelease
/// fails. The default is to not perform any action.
class UpgradeRemediation {
  /// IgnoreTestFailures tells the controller to skip remediation when the Helm tests are run after an
  /// upgrade action but fail. Defaults to 'Test.IgnoreFailures'.
  ignoreTestFailures: Boolean?

  /// RemediateLastFailure tells the controller to remediate the last failure, when no retries remain.
  /// Defaults to 'false' unless 'Retries' is greater than 0.
  remediateLastFailure: Boolean?

  /// Retries is the number of retries that should be attempted on failures before bailing. Remediation,
  /// using 'Strategy', is performed between each attempt. Defaults to '0', a negative integer equals to
  /// unlimited retries.
  retries: Int?

  /// Strategy to use for failure remediation. Defaults to 'rollback'.
  strategy: ("rollback"|"uninstall")?
}

/// ValuesReference contains a reference to a resource containing Helm values, and optionally the key
/// they can be found at.
class ValuesFrom {
  /// Kind of the values referent, valid values are ('Secret', 'ConfigMap').
  kind: "Secret"|"ConfigMap"

  /// Name of the values referent. Should reside in the same namespace as the referring resource.
  name: String(length.isBetween(1, 253))

  /// Optional marks this ValuesReference as optional. When set, a not found error for the values
  /// reference is ignored, but any ValuesKey, TargetPath or transient error will still result in a
  /// reconciliation failure.
  optional: Boolean?

  /// TargetPath is the YAML dot notation path the value should be merged at. When set, the ValuesKey is
  /// expected to be a single flat value. Defaults to 'None', which results in the values getting merged
  /// at the root.
  targetPath: String(length <= 250, matches(Regex(#"^([a-zA-Z0-9_\-.\\\/]|\[[0-9]{1,5}\])+$"#)))?

  /// ValuesKey is the data key where the values.yaml or a specific value can be found at. Defaults to
  /// 'values.yaml'.
  valuesKey: String(length <= 253, matches(Regex(#"^[\-._a-zA-Z0-9]+$"#)))?
}

/// HelmReleaseStatus defines the observed state of a HelmRelease.
///
/// Default if undefined: `{ ["observedGeneration"] = -1 }`
class Status {
  /// Conditions holds the conditions for the HelmRelease.
  conditions: Listing<Condition>?

  /// Failures is the reconciliation failure count against the latest desired state. It is reset after a
  /// successful reconciliation.
  failures: Int?

  /// HelmChart is the namespaced name of the HelmChart resource created by the controller for the
  /// HelmRelease.
  helmChart: String?

  /// History holds the history of Helm releases performed for this HelmRelease up to the last
  /// successfully completed release.
  history: Listing<History>?

  /// InstallFailures is the install failure count against the latest desired state. It is reset after a
  /// successful reconciliation.
  installFailures: Int?

  /// LastAttemptedConfigDigest is the digest for the config (better known as "values") of the last
  /// reconciliation attempt.
  lastAttemptedConfigDigest: String?

  /// LastAttemptedGeneration is the last generation the controller attempted to reconcile.
  lastAttemptedGeneration: Int?

  /// LastAttemptedReleaseAction is the last release action performed for this HelmRelease. It is used to
  /// determine the active remediation strategy.
  lastAttemptedReleaseAction: ("install"|"upgrade")?

  /// LastAttemptedRevision is the Source revision of the last reconciliation attempt. For OCIRepository
  /// sources, the 12 first characters of the digest are appended to the chart version e.g.
  /// "1.2.3+1234567890ab".
  lastAttemptedRevision: String?

  /// LastAttemptedRevisionDigest is the digest of the last reconciliation attempt. This is only set for
  /// OCIRepository sources.
  lastAttemptedRevisionDigest: String?

  /// LastAttemptedValuesChecksum is the SHA1 checksum for the values of the last reconciliation attempt.
  /// Deprecated: Use LastAttemptedConfigDigest instead.
  lastAttemptedValuesChecksum: String?

  /// LastHandledForceAt holds the value of the most recent force request value, so a change of the
  /// annotation value can be detected.
  lastHandledForceAt: String?

  /// LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change of
  /// the annotation value can be detected.
  lastHandledReconcileAt: String?

  /// LastHandledResetAt holds the value of the most recent reset request value, so a change of the
  /// annotation value can be detected.
  lastHandledResetAt: String?

  /// LastReleaseRevision is the revision of the last successful Helm release. Deprecated: Use History
  /// instead.
  lastReleaseRevision: Int?

  /// ObservedGeneration is the last observed generation.
  observedGeneration: Int?

  /// ObservedPostRenderersDigest is the digest for the post-renderers of the last successful
  /// reconciliation attempt.
  observedPostRenderersDigest: String?

  /// StorageNamespace is the namespace of the Helm release storage for the current release.
  storageNamespace: String(length.isBetween(1, 63))?

  /// UpgradeFailures is the upgrade failure count against the latest desired state. It is reset after a
  /// successful reconciliation.
  upgradeFailures: Int?
}

/// Condition contains details for one aspect of the current state of this API Resource.
class Condition {
  /// lastTransitionTime is the last time the condition transitioned from one status to another. This
  /// should be when the underlying condition changed. If that is not known, then using the time when the
  /// API field changed is acceptable.
  lastTransitionTime: String

  /// message is a human readable message indicating details about the transition. This may be an empty
  /// string.
  message: String(length <= 32768)

  /// observedGeneration represents the .metadata.generation that the condition was set based upon. For
  /// instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration
  /// is 9, the condition is out of date with respect to the current state of the instance.
  observedGeneration: Int(isPositive)?

  /// reason contains a programmatic identifier indicating the reason for the condition's last
  /// transition. Producers of specific condition types may define expected values and meanings for this
  /// field, and whether the values are considered a guaranteed API. The value should be a CamelCase
  /// string. This field may not be empty.
  reason: String(length.isBetween(1, 1024), matches(Regex("^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")))

  /// status of the condition, one of True, False, Unknown.
  status: "True"|"False"|"Unknown"

  /// type of condition in CamelCase or in foo.example.com/CamelCase.
  type: String(length <= 316, matches(Regex(#"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"#)))
}

/// Snapshot captures a point-in-time copy of the status information for a Helm release, as managed by
/// the controller.
class History {
  /// APIVersion is the API version of the Snapshot. Provisional: when the calculation method of the
  /// Digest field is changed, this field will be used to distinguish between the old and new methods.
  apiVersion: String?

  /// AppVersion is the chart app version of the release object in storage.
  appVersion: String?

  /// ChartName is the chart name of the release object in storage.
  chartName: String

  /// ChartVersion is the chart version of the release object in storage.
  chartVersion: String

  /// ConfigDigest is the checksum of the config (better known as "values") of the release object in
  /// storage. It has the format of `<algo>:<checksum>`.
  configDigest: String

  /// Deleted is when the release was deleted.
  deleted: String?

  /// Digest is the checksum of the release object in storage. It has the format of `<algo>:<checksum>`.
  digest: String

  /// FirstDeployed is when the release was first deployed.
  firstDeployed: String

  /// LastDeployed is when the release was last deployed.
  lastDeployed: String

  /// Name is the name of the release.
  name: String

  /// Namespace is the namespace the release is deployed to.
  namespace: String

  /// OCIDigest is the digest of the OCI artifact associated with the release.
  ociDigest: String?

  /// Status is the current state of the release.
  status: String

  /// TestHooks is the list of test hooks for the release as observed to be run by the controller.
  testHooks: Mapping<String, TestHooks>?

  /// Version is the version of the release object in storage.
  version: Int
}

/// TestHookStatus holds the status information for a test hook as observed to be run by the controller.
class TestHooks {
  /// LastCompleted is the time the test hook last completed.
  lastCompleted: String?

  /// LastStarted is the time the test hook was last started.
  lastStarted: String?

  /// Phase the test hook was observed to be in.
  phase: String?
}
