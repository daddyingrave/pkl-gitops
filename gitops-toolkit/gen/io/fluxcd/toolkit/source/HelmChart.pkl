/// HelmChart is the Schema for the helmcharts API.
///
/// This module was generated from the CustomResourceDefinition at
/// <https://raw.githubusercontent.com/fluxcd/source-controller/refs/tags/v1.4.1/config/crd/bases/source.toolkit.fluxcd.io_helmcharts.yaml>.
module io.fluxcd.toolkit.source.v1.HelmChart

extends "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.1.1#/K8sResource.pkl"

import "package://pkg.pkl-lang.org/pkl-k8s/k8s@1.1.1#/apimachinery/pkg/apis/meta/v1/ObjectMeta.pkl"

fixed apiVersion: "source.toolkit.fluxcd.io/v1"

fixed kind: "HelmChart"

/// Standard object's metadata.
///
/// More info: <https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata>.
metadata: ObjectMeta?

/// HelmChartSpec specifies the desired state of a Helm chart.
spec: Spec?

/// HelmChartStatus records the observed state of the HelmChart.
///
/// Default if undefined: `{ ["observedGeneration"] = -1 }`
status: Status?

/// HelmChartSpec specifies the desired state of a Helm chart.
class Spec {
  /// Chart is the name or path the Helm chart is available at in the SourceRef.
  chart: String

  /// IgnoreMissingValuesFiles controls whether to silently ignore missing values files rather than
  /// failing.
  ignoreMissingValuesFiles: Boolean?

  /// Interval at which the HelmChart SourceRef is checked for updates. This interval is approximate and
  /// may be subject to jitter to ensure efficient use of resources.
  interval: String(matches(Regex(#"^([0-9]+(\.[0-9]+)?(ms|s|m|h))+$"#)))

  /// ReconcileStrategy determines what enables the creation of a new artifact. Valid values are
  /// ('ChartVersion', 'Revision'). See the documentation of the values for an explanation on their
  /// behavior. Defaults to ChartVersion when omitted.
  ///
  /// Default if undefined: `"ChartVersion"`
  reconcileStrategy: ("ChartVersion"|"Revision")?

  /// SourceRef is the reference to the Source the chart is available at.
  sourceRef: SourceRef

  /// Suspend tells the controller to suspend the reconciliation of this source.
  suspend: Boolean?

  /// ValuesFiles is an alternative list of values files to use as the chart values (values.yaml is not
  /// included by default), expected to be a relative path in the SourceRef. Values files are merged in
  /// the order of this list with the last file overriding the first. Ignored when omitted.
  valuesFiles: Listing<String>?

  /// Verify contains the secret name containing the trusted public keys used to verify the signature and
  /// specifies which provider to use to check whether OCI image is authentic. This field is only
  /// supported when using HelmRepository source with spec.type 'oci'. Chart dependencies, which are not
  /// bundled in the umbrella chart artifact, are not verified.
  verify: Verify?

  /// Version is the chart version semver expression, ignored for charts from GitRepository and Bucket
  /// sources. Defaults to latest when omitted.
  ///
  /// Default if undefined: `"*"`
  version: String?
}

/// SourceRef is the reference to the Source the chart is available at.
class SourceRef {
  /// APIVersion of the referent.
  apiVersion: String?

  /// Kind of the referent, valid values are ('HelmRepository', 'GitRepository', 'Bucket').
  kind: "HelmRepository"|"GitRepository"|"Bucket"

  /// Name of the referent.
  name: String
}

/// Verify contains the secret name containing the trusted public keys used to verify the signature and
/// specifies which provider to use to check whether OCI image is authentic. This field is only supported
/// when using HelmRepository source with spec.type 'oci'. Chart dependencies, which are not bundled in
/// the umbrella chart artifact, are not verified.
class Verify {
  /// MatchOIDCIdentity specifies the identity matching criteria to use while verifying an OCI artifact
  /// which was signed using Cosign keyless signing. The artifact's identity is deemed to be verified if
  /// any of the specified matchers match against the identity.
  matchOIDCIdentity: Listing<MatchOIDCIdentity>?

  /// Provider specifies the technology used to sign the OCI Artifact.
  ///
  /// Default if undefined: `"cosign"`
  provider: "cosign"|"notation"

  /// SecretRef specifies the Kubernetes Secret containing the trusted public keys.
  secretRef: SecretRef?
}

/// OIDCIdentityMatch specifies options for verifying the certificate identity, i.e. the issuer and the
/// subject of the certificate.
class MatchOIDCIdentity {
  /// Issuer specifies the regex pattern to match against to verify the OIDC issuer in the Fulcio
  /// certificate. The pattern must be a valid Go regular expression.
  issuer: String

  /// Subject specifies the regex pattern to match against to verify the identity subject in the Fulcio
  /// certificate. The pattern must be a valid Go regular expression.
  subject: String
}

/// SecretRef specifies the Kubernetes Secret containing the trusted public keys.
class SecretRef {
  /// Name of the referent.
  name: String
}

/// HelmChartStatus records the observed state of the HelmChart.
///
/// Default if undefined: `{ ["observedGeneration"] = -1 }`
class Status {
  /// Artifact represents the output of the last successful reconciliation.
  artifact: Artifact?

  /// Conditions holds the conditions for the HelmChart.
  conditions: Listing<Condition>?

  /// LastHandledReconcileAt holds the value of the most recent reconcile request value, so a change of
  /// the annotation value can be detected.
  lastHandledReconcileAt: String?

  /// ObservedChartName is the last observed chart name as specified by the resolved chart reference.
  observedChartName: String?

  /// ObservedGeneration is the last observed generation of the HelmChart object.
  observedGeneration: Int?

  /// ObservedSourceArtifactRevision is the last observed Artifact.Revision of the
  /// HelmChartSpec.SourceRef.
  observedSourceArtifactRevision: String?

  /// ObservedValuesFiles are the observed value files of the last successful reconciliation. It matches
  /// the chart in the last successfully reconciled artifact.
  observedValuesFiles: Listing<String>?

  /// URL is the dynamic fetch link for the latest Artifact. It is provided on a "best effort" basis, and
  /// using the precise BucketStatus.Artifact data is recommended.
  url: String?
}

/// Artifact represents the output of the last successful reconciliation.
class Artifact {
  /// Digest is the digest of the file in the form of '<algorithm>:<checksum>'.
  digest: String(matches(Regex("^[a-z0-9]+(?:[.+_-][a-z0-9]+)*:[a-zA-Z0-9=_-]+$")))?

  /// LastUpdateTime is the timestamp corresponding to the last update of the Artifact.
  lastUpdateTime: String

  /// Metadata holds upstream information such as OCI annotations.
  metadata: Mapping<String, String>?

  /// Path is the relative file path of the Artifact. It can be used to locate the file in the root of
  /// the Artifact storage on the local file system of the controller managing the Source.
  path: String

  /// Revision is a human-readable identifier traceable in the origin source system. It can be a Git
  /// commit SHA, Git tag, a Helm chart version, etc.
  revision: String

  /// Size is the number of bytes in the file.
  size: Int?

  /// URL is the HTTP address of the Artifact as exposed by the controller managing the Source. It can be
  /// used to retrieve the Artifact for consumption, e.g. by another controller applying the Artifact
  /// contents.
  url: String
}

/// Condition contains details for one aspect of the current state of this API Resource.
class Condition {
  /// lastTransitionTime is the last time the condition transitioned from one status to another. This
  /// should be when the underlying condition changed. If that is not known, then using the time when the
  /// API field changed is acceptable.
  lastTransitionTime: String

  /// message is a human readable message indicating details about the transition. This may be an empty
  /// string.
  message: String(length <= 32768)

  /// observedGeneration represents the .metadata.generation that the condition was set based upon. For
  /// instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration
  /// is 9, the condition is out of date with respect to the current state of the instance.
  observedGeneration: Int(isPositive)?

  /// reason contains a programmatic identifier indicating the reason for the condition's last
  /// transition. Producers of specific condition types may define expected values and meanings for this
  /// field, and whether the values are considered a guaranteed API. The value should be a CamelCase
  /// string. This field may not be empty.
  reason: String(length.isBetween(1, 1024), matches(Regex("^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$")))

  /// status of the condition, one of True, False, Unknown.
  status: "True"|"False"|"Unknown"

  /// type of condition in CamelCase or in foo.example.com/CamelCase.
  type: String(length <= 316, matches(Regex(#"^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$"#)))
}
